#!/usr/bin/env python
# coding=utf-8
__author__ = "Jonathan Enzinna <jonnyfunfun@gmail.com>"
__version__ = '0.0.1'

import os
import sys
import curses
import urllib2
import urlparse
import math
import thread
import time
import platform

from datetime import datetime
from ConfigParser import ConfigParser
from optparse import OptionParser
from threading import Timer
from urllib import quote

try:
    import json
except ImportError:
    import simplejson as json
    
try:
    import praw
except ImportError:
    print "Redmail requires praw to work.  You can probably install it with `pip install praw`"
    exit()

# some "constant" strings
USAGE = """%s [-v|--version] [-c|--config]

Redmail is a command-line Reddit mail client
http://github.com/JonnyFunFun/redmail""" % sys.argv[0]
VERSION = """redmail v%(version)s <http://github.com/JonnyFunFun/redmail>

Copyright (c) %(year)s : %(author)s
Released under the MIT license.
""" % dict(
    version=__version__,
    year=datetime.now().year,
    author=__author__
)

USER_AGENT = """Redmail/%(version)s %(platform)s""" % dict( version=__version__, platform=platform.platform() )

DEFAULT_CONFIG_FILE = os.path.expanduser("~/.redmail/config")

COLOR_NAMES = {
    "black": 0,
    "red": 1,
    "green": 2,
    "yellow": 3,
    "blue": 4,
    "magenta": 5,
    "cyan": 6,
    "white": 7,
    "default": -1,
}

# messages
MESSAGES = {
    "bad-config": "Your configuration file is invalid.  Please check it and try again or specify\na different configuration path.",
    "config-error": "A configuration error has occurred:\n%s"
}

# UI line formats
UI_LINES = {
    "title": " Redmail/{user} -- {total} messages, {unread} unread -- /{loc}",
    "toolbar": "(q)uit    (r)efresh    (o)pen    (z)mark read    mark a(l)l read    (h)ome",
    "item-toolbar": "(q)uit    mark (u)nread/r(e)ad    rep(l)y    (h)ome",
    "message-thread-line": " >> {subject}"
}

# Default configuration options
Config = {
    "update-timer": 5,
    "browser": "",
    "reddit-url": "",
    "last-username": "",
    "time-format": "'%Y-%m-%d %H:%M:%S'",
    "use-color": True
}

Colors = {
    "title": ("brightred", "blue"),
    "toolbar": ("yellow", "blue"),
    "normal": ("white", "black"),
    "entry": ("white", "black"),
    "entry-data": ("yellow", "black"),
    "entry-selected": ("brightyellow", "magenta"),
    "entry-unread": ("red", "black"),
    "entry-data-selected": ("brightyellow", "magenta"),
    "entry-bottom": ("green", "black"),
    "entry-bottom-selected": ("brightyellow", "magenta"),
    "entry-bottom-data": ("yellow", "black"),
    "entry-bottom-data-selected": ("brightyellow", "magenta"),
    "textinput": ("white", "cyan"),
    "textinput-selected": ("brightyellow", "magenta"),
    "submit": ("white", "blue"),
    "submit-selected": ("cyan", "magenta"),
    "messages": ("brightgreen", "blue"),
}

# key bindings
Bindings = {
    ord("q"): "quit",
    ord("r"): "update",

    ord("k"): "prev-line",
    ord("j"): "next-line",

    ord("o"): "open",
    10: "open", #enter
    ord("z"): "mark-read",

    ord("l"): "mark-all-read",

    ord("h"): "home",

    ord(""): "prev-page",
    ord(""): "next-page",

    ord(""): "redraw",

    curses.KEY_HOME: "first-line",
    curses.KEY_END: "last-line",

    curses.KEY_UP: "prev-line",
    curses.KEY_DOWN: "next-line",

    curses.KEY_PPAGE: "prev-page",
    curses.KEY_NPAGE: "next-page",
}


# exceptions
class ImproperlyConfigured(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)


# config parser
def parse_config(filename):
    config = ConfigParser()

    if not os.path.exists(filename):
        if filename is not DEFAULT_CONFIG_FILE:
            return parse_config(DEFAULT_CONFIG_FILE)
        else:
            # write the default configuration file
            try:
                os.stat(os.path.dirname(DEFAULT_CONFIG_FILE))
            except:
                os.mkdir(os.path.dirname(DEFAULT_CONFIG_FILE))
            config_file = open(DEFAULT_CONFIG_FILE, 'w')
            config.add_section("redmail")
            for k,v in Config.items():
                config.set("redmail",k,v)
            config.write(config_file)
            config_file.close()

    config.read([filename,])

    if config.has_section("redmail"):
        for opt in config.options("redmail"):
            Config[opt] = unicode(config.get("redmail", opt))
    else:
        raise ImproperlyConfigured(MESSAGES['bad-config'])

    if config.has_section("color"):
        for cname in config.options("color"):
            col = config.get("color", cname).split(",")
            if len(col) == 2:
                Colors[cname] = col
            else:
                Colors[cname] = col[0], Colors["normal"][1]


# write config
def save_config(filename):
    config = ConfigParser()

    # write the default configuration file
    try:
        os.stat(os.path.dirname(filename))
    except:
        os.mkdir(os.path.dirname(filename))
    config_file = open(filename, 'w')
    config.add_section("redmail")
    for k,v in Config.items():
        config.set("redmail",k,v)
    config.write(config_file)
    config_file.close()


# some command functions
commands = {}


def command(name=None, cmds=None):
    def cmd(func):
        if cmds == None:
            global commands
            cm = commands
        else:
            cm = cmds
        cm[(name or func.__name__)] = func
        return func
    return cmd


def getcommand(name, cmds=None):
    """Get a command by name."""
    # Get command dict
    if cmds == None:
        global commands
        cmd = commands
    else:
        cmd = cmds

    # Exact match
    if name in cmd:
        return cmd[name]

    # Prefix match
    candidate = filter(lambda x: x.startswith(name), cmd.keys())

    if len(candidate) == 1:
        return cmd[candidate[0]]
    elif candidate:
        return candidate
    else:
        return None


# class to manage data
class DataFactory(object):
    def __init__(self, ui, config_file):
        self.interface = ui
        self.config_file = config_file
        
        self.username, self.password = self.interface.do_login(Config['last-username'])

        Config['last-username'] = self.username
        save_config(config_file)

        self.praw = praw.Reddit(user_agent=USER_AGENT)
        self.praw.login(self.username, self.password)

        self.counts = dict(unread=0, total=0)
        self.error = False
        self.loading = False

        self.threads = {}
        self.messages = []

        self.update()

    def update(self):
        self.loading = True
        self.interface.signal_for_update()

        self.messages = []
        self.counts['unread'] = 0

        for item in self.praw.get_inbox(limit=None):
            if type(item) is praw.objects.Message:
                self.messages.append(item)
                if item.new:
                    self.counts['unread'] += 1

        self.counts['total'] = self.messages.__len__()

        self.loading = False
        self.error = None
        self.interface.signal_for_update()


# UI class - manages the curses interface
class UI(object):
    def __init__(self):
        self.screen = None
        self.data = None
        self.update_timer = Timer(int(Config['update-timer'])*60, self._update)

        self._needs_update = False
        self._quit = False

        self._location = "Inbox"

    def initialize(self, config_file):
        # starts up curses and our UI
        self.screen = curses.initscr()
        self.screen.keypad(1)
        self.screen.timeout(400)
        self.screen.scrollok(0)
        self.colors = None
        self.page = 1
        self.selected_index = -1
        curses.noecho()
        if Config['use-color']:
            curses.start_color()
            curses.use_default_colors()

            # Initialise colors
            self.colors = {}
            pairnum = 1
            for cname in Colors:
                fg, bg = Colors[cname]

                if fg.startswith("bright"):
                    fbright = True
                    fg = fg[6:]
                else:
                    fbright = False

                try:
                    curses.init_pair(pairnum, COLOR_NAMES[fg], COLOR_NAMES[bg])
                except IndexError:
                    curses.init_pair(pairnum, 0, 0)

                self.colors[cname] = curses.color_pair(pairnum)

                if fbright:
                    self.colors[cname] |= curses.A_BOLD

                pairnum += 1
        
        # start up our data object
        self.data = DataFactory(self, config_file)

    def do_login(self, last_username = ''):
        height, width = self.screen.getmaxyx()
        pos_x = (width - 40) / 2
        pos_y = (height - 11) / 2
        selected = "u"
        password = ""
        username = last_username
        if username.__len__() is not 0:
            selected = "p"
        login_win = curses.newwin(11, 40, pos_y, pos_x)
        login_win.addstr(1, 1, "Login to Reddit".center(40), self.colors['title'])
        login_win.addstr(3, 1, "Username:")
        login_win.addstr(4, 5, username.ljust(30), self.colors['textinput-selected' if selected is "u" else 'textinput'])
        login_win.addstr(6, 1, "Password:")
        login_win.addstr(7, 5, "".ljust(30), self.colors['textinput-selected' if selected is "p" else 'textinput'])
        login_win.addstr(9, 15, "Login".center(10), self.colors['submit'])
        login_win.move(4, 5)
        login_win.border()
        login_win.refresh()
        while True:
            chcode = login_win.getch()
            char = chr(chcode)
            if chcode == 10: # enter
                if selected is "u":
                    selected = "p"
                elif selected is "p":
                    selected = "s"
                else:
                    self.show_loading_modal()
                    return username, password
            elif chcode == 27: # special escape            
                chcode = login_win.getch() # gets rid of 91
                chcode = login_win.getch()
                if chcode  == 66: # down
                    if selected is "u":
                        selected = "p"
                    elif selected is "p":
                        selected = "s"
                elif chcode == 65: #up
                    if selected is "s":
                        selected = "p"
                    elif selected is "p":
                        selected = "u"
            elif chcode == 127: # backspace
                if selected is "p":
                    password = password[:-1]
                else:
                    username = username[:-1]
            elif selected is "u":
                username += chr(chcode)
            elif selected is "p":
                password += chr(chcode)
            login_win.addstr(4, 5, username.ljust(30), self.colors['textinput-selected' if selected is "u" else 'textinput'])
            login_win.addstr(7, 5, ("*" * password.__len__()).ljust(30), self.colors['textinput-selected' if selected is "p" else 'textinput'])
            login_win.addstr(9, 15, "Login".center(10), self.colors['submit-selected' if selected is "s" else 'submit'])            

    def show_loading_modal(self):
        height, width = self.screen.getmaxyx()
        pos_x = (width - 20) / 2
        pos_y = (height - 3) / 2
        modal_win = curses.newwin(3, 20, pos_y, pos_x)
        modal_win.addstr(1 ,1, "Loading...".center(18))
        modal_win.move(0, 0)
        modal_win.border()
        modal_win.refresh()

    def open_thread(self, thread):
        pass

    def move_home(self):
        self._location = "Inbox"
        self._needs_update = True

    def start(self):
        self.update_timer.start()
        # selfish main loop!
        self._update()
        while not self._quit:
            key = self.screen.getch()
            if key in Bindings:
                cmd = getcommand(Bindings[key])
                if callable(cmd):
                    cmd(self.data, self)
            if self._needs_update:
                self.refresh()
                self._needs_update = False

    def signal_for_update(self):
        self._needs_update = True

    def _update(self):
        self.data.update()

    def setline(self, y, x, line, color=None, offset=0, char=' '):
        height, width = self.screen.getmaxyx()
        line = line.ljust(width-offset, char)

        if Config['use-color'] and color and color in self.colors:
            self.screen.addstr(y, x, line, self.colors[color])
        else:
            self.screen.addstr(y, x, line)

    def refresh(self):
        h, w = self.screen.getmaxyx()

        for row in range(1, h-1):
            self.setline(row, 0, (" "*w))

        # Title
        self.setline(0, 0, UI_LINES['title'].format(user=unicode(self.data.username),
                                                    total=self.data.counts['total'],
                                                    unread=self.data.counts['unread'],
                                                    loc=self._location), color="title")

        if self._location == "Inbox" or self.current_item is None:
            # draw the inbox
            self._draw_inbox()
        else:
            # draw a message
            self._draw_message(self.current_item)

        if self.data.error:
            self.screen.addstr(h-1, 0, self.data.error.center(w-1))

        if self.data.loading:
            self.setline(h-2, 0, "Loading...".center(w-1))

        self.screen.refresh()

    def _paginate(self, items, page):
        h, w = self.screen.getmaxyx()
        ipp = h - 2
        if items.__len__() < ipp:
            return items
        else:
            return items[(page-1)*ipp:ipp]

    def _draw_inbox(self):
        h, w = self.screen.getmaxyx()
        y = 1

        entries = self._paginate(self.data.messages, self.page)

        for entry in entries:
            if y < h-2:
                # display it
                color = "entry"
                if self.selected_index == y:
                    color = "entry-selected"
                elif entry.new:
                    color = "entry-unread"
                self.setline(y, 0, UI_LINES['message-thread-line'].format(subject=entry.subject), color=color)
            y += 1

        self.setline(h-2, 0, UI_LINES['toolbar'].center(w-1), color="toolbar")

    def _draw_message(self, message):
        h, w = self.screen.getmaxyx()
        y = 0
        if message.author is not None:
            self.setline(1, 0, "From: " + message.author.name)
            y+=1
        self.setline(y+1, 0, "Date: " + datetime.fromtimestamp(message.created).strftime(Config['time-format']))
        self.setline(y+2, 0, ">> " + message.subject)
        self.setline(y+4, 0, message.body)

        self.setline(h-2, 0, UI_LINES['item-toolbar'].center(w-1), color="toolbar")

    def _draw_reply_window(self):
        pass

    def next_line(self):
        h, w = self.screen.getmaxyx()
        self.selected_index += 1
        if self.selected_index == 0:
            self.selected_index = 1
        elif self.selected_index >= h:
            if self.data.threads.keys().__len__() > self.page*h:
                # next page
                self.page += 1
                self.selected_index = 1
            else:
                self.selected_index -= 1
        self._needs_update = True

    def prev_line(self):
        h, w = self.screen.getmaxyx()
        self.selected_index -= 1
        if self.selected_index == 0:
            if self.page != 1:
                self.page -= 1
            else:
                self.selected_index = 1
        self._needs_update = True

    def next_page(self):
        self.selected_index = 1
        self.page += 1
        # clip
        if self.page > self.total_pages:
            self.page = self.total_pages
        self._needs_update = True

    def prev_page(self):
        self.selected_index = 1
        if self.page != 1:
            self.page -= 1
        self._needs_update = True

    def open_item(self):
        idx = (self.selected_index + ((self.page - 1) * self.items_per_page)) - 1
        item = self.data.messages[idx]
        self._location = item.subject
        self.current_item = item
        self._needs_update = True

    @property
    def items_per_page(self):
        return self.screen.getmaxyx()[0] - 2

    @property
    def total_pages(self, location="Inbox"):
        h, w = self.screen.getmaxyx()
        ipp = h - 2
        return math.ceil(self.data.threads.keys().__len__() / ipp)

    def cleanup(self):
        #stop our timer and close curses
        self.update_timer.cancel()
        curses.endwin()

    def quit(self):
        self._quit = True


@command(name="quit")
def cmd_quit(data, ui):
    ui.quit()


@command(name="update")
def cmd_update(data, ui):
    data.update()


@command(name="home")
def cmd_home(data, ui):
    if not ui._location == "Inbox":
        ui.move_home()


@command(name="prev-line")
def cmd_prev_line(data, ui):
    ui.prev_line()


@command(name="next-line")
def cmd_next_line(data, ui):
    ui.next_line()


@command(name="next-page")
def cmd_next_page(data, ui):
    ui.next_page()


@command(name="prev-page")
def cmd_prev_page(data, ui):
    ui.prev_page()


@command(name="open")
def cmd_open_item(data, ui):
    ui.open_item()


def main():
    # parse arguments
    parser = OptionParser(USAGE)
    parser.add_option("-v", "--version", action="store_true", dest="display_version", help="display version information")
    parser.add_option("-c", "--config", dest="config_file", help="specify the config file to use, defaults to %s" % DEFAULT_CONFIG_FILE)
    #parser.add_option("-h", "--help", action="store_true", dest="display_help")
    (options, args) = parser.parse_args()
    if options.display_version:
        print(VERSION)
        return
    config_file = os.path.expanduser(options.config_file or DEFAULT_CONFIG_FILE)
    try:
        parse_config(config_file)
    except ImproperlyConfigured as e:
        print MESSAGES['config-error'] % e.value

    ui = UI()

    try:
        ui.initialize(config_file)
        ui.start()
        ui.cleanup()
    except:
        ui.cleanup()
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()